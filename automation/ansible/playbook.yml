- hosts: all
  tasks:

    - name: Create ansible user
      become: yes
      user:
        name: ansible
        groups: "{{ 'sudo' if ansible_os_family == 'Debian' else 'wheel' }}"
        shell: /bin/bash
        create_home: yes

    - name: Allow ansible user to run sudo
      become: yes
      copy:
        dest: "/etc/sudoers.d/ansible"
        content: "ansible ALL=(ALL) NOPASSWD: ALL"
        mode: 0440

    - name: Ensure SSH directory exists for ansible user
      file:
        path: "/home/ansible/.ssh"
        state: directory
        owner: ansible
        group: ansible
        mode: '0700'

    - name: Copy SSH private key for ansible user
      copy:
        src: "~/.ssh/id_ed25519"
        dest: "/home/ansible/.ssh/id_ed25519"
        owner: ansible
        group: ansible
        mode: '0600'
      when: ansible_connection not in ["docker", "local"]
      ignore_errors: yes

    - name: Copy SSH public key for ansible user
      copy:
        src: "~/.ssh/id_ed25519.pub"
        dest: "/home/ansible/.ssh/id_ed25519.pub"
        owner: ansible
        group: ansible
        mode: '0644'
      when: ansible_connection not in ["docker", "local"]
      ignore_errors: yes

    - name: Copy SSH config into container
      copy:
        src: "~/.ssh/config"
        dest: "/home/ansible/.ssh/config"
        owner: ansible
        group: ansible
        mode: '0600'
      when: ansible_connection not in ["docker", "local"]
      ignore_errors: yes

    - name: Ensure SSH known hosts include GitHub
      shell: ssh-keyscan github.com >> /home/ansible/.ssh/known_hosts
      args:
        creates: "/home/ansible/.ssh/known_hosts"

    - name: Install OpenSSH server
      become: yes
      package:
        name: openssh-server
        state: present
      when: ansible_connection != "docker"

    - name: Enable and start SSH service
      become: yes
      service:
        name: ssh
        state: started
        enabled: true
      when: ansible_connection != "docker"

    - name: Install required packages (Debian-based)
      become: yes
      apt:
        name:
          - tmux
          - zsh
          - bat
          - neovim
          - git
        state: present
      when: ansible_os_family == "Debian"

    - name: Install required packages (MacOS)
      become: yes
      homebrew:
        name:
          - tmux
          - zsh
          - bat
          - neovim
          - git
        state: present
      when: ansible_os_family == "Darwin"

    - name: Install required packages (Fedora-based)
      become: yes
      dnf:
        name:
          - zsh
          - tmux
          - bat
          - neovim
          - git
        state: present
      when: ansible_os_family == "RedHat"

    - name: Clone dotfiles repository
      git:
        repo: "git@github.com:brett-odu/dotfiles.git"
        dest: "{{ ansible_env.HOME }}/.dotfiles"
        version: develop
        accept_hostkey: yes
      environment:
        GIT_SSH_COMMAND: "ssh -F /home/ansible/.ssh/config -o StrictHostKeyChecking=no"

    - name: Ensure .config directory exists
      file:
        path: "{{ ansible_env.HOME }}/.config"
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'

    - name: Symlink dotfiles
      file:
        src: "{{ ansible_env.HOME }}/.dotfiles/.config/{{ item.src }}"
        dest: "{{ ansible_env.HOME }}/{{ item.dest }}"
        state: link
        force: yes  # Ensure old files are replaced if necessary
      loop:
        - { src: "zsh/.zshrc", dest: ".zshrc" }
        - { src: "tmux/", dest: ".config/tmux" }
        - { src: "nvim/", dest: ".config/nvim" }
        - { src: "wezterm/", dest: ".config/wezterm" }
        - { src: "bat/", dest: ".config/bat" }
        - { src: "starship.toml", dest: ".config/starship.toml" }

    # - name: Change default shell to Zsh
    #   user:
    #     name: "{{ ansible_env.USER }}"
    #     shell: /bin/zsh"

    # - name: Install oh-my-zsh
    #   shell: |
    #     rm -rf ~/.oh-my-zsh
    #     sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    #   args:
    #     creates: ~/.oh-my-zsh
